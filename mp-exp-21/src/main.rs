extern crate proc_macro;
use proc_macro::TokenStream;
use quote::quote;
use syn::{parse_macro_input, DeriveInput};

#[proc_macro]
pub fn custom_derive(input: TokenStream) -> TokenStream {
    // Parse the input into a DeriveInput struct
    let input = parse_macro_input!(input as DeriveInput);

    // Generate custom code using the quote! macro
    let expanded = quote! {
        impl MyTrait for #input {
            fn my_method(&self) {
                // Custom code here
            }
        }
    };

    // Return the generated code as a TokenStream
    expanded.into()
}

#[custom_derive]
struct MyStruct;

fn main() {
    let my_struct = MyStruct;
    my_struct.my_method(); // Call the custom method generated by the macro
}
