{"message":"dereference of raw pointer is unsafe and requires unsafe function or block","code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe function or block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":155,"byte_end":158,"line_start":8,"line_end":8,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"    println!(\"R1 is {:?}\", *r1); ","highlight_start":28,"highlight_end":31}],"label":"dereference of raw pointer","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/asadali/.rustup/toolchains/1.67.1-x86_64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4158,"byte_end":4191,"line_start":136,"line_end":136,"column_start":28,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":28,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":132,"byte_end":159,"line_start":8,"line_end":8,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    println!(\"R1 is {:?}\", *r1); ","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/Users/asadali/.rustup/toolchains/1.67.1-x86_64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4036,"byte_end":4056,"line_start":131,"line_end":131,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! println {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/Users/asadali/.rustup/toolchains/1.67.1-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":31129,"byte_end":31156,"line_start":906,"line_end":906,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    macro_rules! format_args_nl {","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0133]\u001b[0m\u001b[0m\u001b[1m: dereference of raw pointer is unsafe and requires unsafe function or block\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"R1 is {:?}\", *r1); \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdereference of raw pointer\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0133`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0133`.\u001b[0m\n"}
